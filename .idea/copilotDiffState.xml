<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/example/touristsights/ListFragment.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/example/touristsights/ListFragment.kt" />
              <option name="originalContent" value="package com.example.touristsights&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.content.res.Configuration&#10;import android.os.Bundle&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.fragment.app.FragmentManager&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.example.touristsights.databinding.FragmentListBinding&#10;&#10;class ListFragment : Fragment() {&#10;    private var _binding: FragmentListBinding? = null&#10;    private val binding get() = _binding!!&#10;    private lateinit var sightAdapter: SightAdapter&#10;&#10;    // ActivityResultLauncherを使用して結果を受け取る&#10;    private val addPlaceLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            // 新しいデータでリストを更新&#10;            refreshSightsList()&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = FragmentListBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        binding.addPlaceButton.setOnClickListener {&#10;            val intent = Intent(requireContext(), AddPlaceActivity::class.java)&#10;            addPlaceLauncher.launch(intent)&#10;        }&#10;&#10;        setupRecyclerView()&#10;    }&#10;&#10;    private fun setupRecyclerView() {&#10;        binding.list.apply {&#10;            layoutManager = when {&#10;                resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT&#10;                -&gt; LinearLayoutManager(context)&#10;                else -&gt; GridLayoutManager(context, 2)&#10;            }&#10;&#10;            // 新しいContextベースの関数を使用し、MutableListに変換&#10;            sightAdapter = SightAdapter(context, getSights(requireContext()).toMutableList()).apply {&#10;                setOnItemClickListener { position: Int -&gt;&#10;                    fragmentManager?.let { manager: FragmentManager -&gt;&#10;                        val tag = &quot;DetailFragment&quot;&#10;                        var fragment = manager.findFragmentByTag(tag) as? DetailFragment&#10;                        if (fragment == null) {&#10;                            fragment = DetailFragment()&#10;                            fragment.arguments = Bundle().apply {&#10;                                putInt(ROW_POSITION, position)&#10;                            }&#10;                            manager.beginTransaction().apply {&#10;                                setCustomAnimations(&#10;                                    android.R.anim.slide_in_left,&#10;                                    android.R.anim.slide_out_right,&#10;                                    android.R.anim.fade_in,&#10;                                    android.R.anim.fade_out&#10;                                )&#10;                                replace(R.id.content, fragment, tag)&#10;                                addToBackStack(null)&#10;                            }.commit()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            adapter = sightAdapter&#10;        }&#10;    }&#10;&#10;    private fun refreshSightsList() {&#10;        // 新しいデータでアダプターを更新&#10;        val newSights = getSights(requireContext())&#10;        sightAdapter.updateSights(newSights)&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.touristsights&#10;&#10;import android.app.Activity&#10;import android.content.Intent&#10;import android.content.res.Configuration&#10;import android.os.Bundle&#10;import androidx.fragment.app.Fragment&#10;import android.view.LayoutInflater&#10;import android.view.View&#10;import android.view.ViewGroup&#10;import androidx.activity.result.contract.ActivityResultContracts&#10;import androidx.fragment.app.FragmentManager&#10;import androidx.recyclerview.widget.GridLayoutManager&#10;import androidx.recyclerview.widget.LinearLayoutManager&#10;import com.example.touristsights.databinding.FragmentListBinding&#10;&#10;class ListFragment : Fragment() {&#10;    private var _binding: FragmentListBinding? = null&#10;    private val binding get() = _binding!!&#10;    private lateinit var sightAdapter: SightAdapter&#10;&#10;    // ActivityResultLauncherを使用して結果を受け取る&#10;    private val addPlaceLauncher = registerForActivityResult(&#10;        ActivityResultContracts.StartActivityForResult()&#10;    ) { result -&gt;&#10;        if (result.resultCode == Activity.RESULT_OK) {&#10;            // 新しいデータでリストを更新&#10;            refreshSightsList()&#10;        }&#10;    }&#10;&#10;    override fun onCreateView(&#10;        inflater: LayoutInflater, container: ViewGroup?,&#10;        savedInstanceState: Bundle?&#10;    ): View? {&#10;        _binding = FragmentListBinding.inflate(inflater, container, false)&#10;        return binding.root&#10;    }&#10;&#10;    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {&#10;        super.onViewCreated(view, savedInstanceState)&#10;&#10;        binding.addPlaceButton.setOnClickListener {&#10;            val intent = Intent(requireContext(), AddPlaceActivity::class.java)&#10;            addPlaceLauncher.launch(intent)&#10;        }&#10;&#10;        setupRecyclerView()&#10;    }&#10;&#10;    private fun setupRecyclerView() {&#10;        binding.list.apply {&#10;            layoutManager = when {&#10;                resources.configuration.orientation == Configuration.ORIENTATION_PORTRAIT&#10;                -&gt; LinearLayoutManager(context)&#10;                else -&gt; GridLayoutManager(context, 2)&#10;            }&#10;&#10;            // 新しいContextベースの関数を使用し、MutableListに変換&#10;            sightAdapter = SightAdapter(context, getSights(requireContext()).toMutableList()).apply {&#10;                setOnItemClickListener { position: Int -&gt;&#10;                    fragmentManager?.let { manager: FragmentManager -&gt;&#10;                        val tag = &quot;DetailFragment&quot;&#10;                        var fragment = manager.findFragmentByTag(tag) as? DetailFragment&#10;                        if (fragment == null) {&#10;                            fragment = DetailFragment()&#10;                            fragment.arguments = Bundle().apply {&#10;                                putInt(ROW_POSITION, position)&#10;                            }&#10;                            manager.beginTransaction().apply {&#10;                                setCustomAnimations(&#10;                                    android.R.anim.slide_in_left,&#10;                                    android.R.anim.slide_out_right,&#10;                                    android.R.anim.fade_in,&#10;                                    android.R.anim.fade_out&#10;                                )&#10;                                replace(R.id.content, fragment, tag)&#10;                                addToBackStack(null)&#10;                            }.commit()&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;            adapter = sightAdapter&#10;        }&#10;    }&#10;&#10;    private fun refreshSightsList() {&#10;        // 新しいデータでアダプターを更新&#10;        val newSights = getSights(requireContext())&#10;        sightAdapter.updateSights(newSights)&#10;    }&#10;&#10;    override fun onDestroyView() {&#10;        super.onDestroyView()&#10;        _binding = null&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>